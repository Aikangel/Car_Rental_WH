// <auto-generated />
using System;
using Car_Rental_WH.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Car_Rental_WH.Migrations
{
    [DbContext(typeof(Car_RentalContext))]
    [Migration("20201128071616_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Car_Rental_WH.Models.Car", b =>
                {
                    b.Property<int>("VehicleCode")
                        .HasColumnType("INT")
                        .HasColumnName("Vehicle_code");

                    b.Property<int>("BodyNumber")
                        .HasColumnType("INT")
                        .HasColumnName("Body_number");

                    b.Property<double>("CarPrice")
                        .HasColumnType("FLOAT")
                        .HasColumnName("Car_price");

                    b.Property<int>("EngineNumber")
                        .HasColumnType("INT")
                        .HasColumnName("Engine_number");

                    b.Property<DateTime>("LastToDate")
                        .HasColumnType("DATE")
                        .HasColumnName("Last_TO_date");

                    b.Property<double>("PriceOfTheRentalDay")
                        .HasColumnType("FLOAT")
                        .HasColumnName("Price_of_the_rental_day");

                    b.Property<string>("RefundMark")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Refund_mark");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("INT")
                        .HasColumnName("Registration_number");

                    b.Property<int>("Run")
                        .HasColumnType("INT");

                    b.Property<string>("SpecialMark")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Special_mark");

                    b.Property<int>("TheCodeOfTheEmployee")
                        .HasColumnType("INT")
                        .HasColumnName("The_code_of_the_employee");

                    b.Property<DateTime>("YearOfManufacture")
                        .HasColumnType("DATE")
                        .HasColumnName("Year_of_manufacture");

                    b.HasKey("VehicleCode");

                    b.HasIndex("TheCodeOfTheEmployee");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.CarBrand", b =>
                {
                    b.Property<int>("BrandCode")
                        .HasColumnType("INT")
                        .HasColumnName("Brand_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("TechnicalParameters")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("Technical_parameters");

                    b.Property<int?>("VehicleCode")
                        .HasColumnType("INT")
                        .HasColumnName("Vehicle_code");

                    b.HasKey("BrandCode");

                    b.HasIndex("VehicleCode");

                    b.ToTable("Car_brand");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.ComplementaryService", b =>
                {
                    b.Property<int>("ServiceCode")
                        .HasColumnType("INT")
                        .HasColumnName("Service_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<double>("Price")
                        .HasColumnType("FLOAT");

                    b.HasKey("ServiceCode");

                    b.ToTable("Complementary_services");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Customer", b =>
                {
                    b.Property<int>("ClientCode")
                        .HasColumnType("INT")
                        .HasColumnName("Client_code");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("Date_of_birth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Full_name");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Passport_data");

                    b.Property<string>("Paul")
                        .IsRequired()
                        .HasColumnType("CHAR(5)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("CHAR(11)");

                    b.HasKey("ClientCode");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Hire", b =>
                {
                    b.Property<int>("ClientCode")
                        .HasColumnType("INT")
                        .HasColumnName("Client_code");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("DATE")
                        .HasColumnName("Date_of_issue");

                    b.Property<DateTime>("RentalPeriod")
                        .HasColumnType("DATE")
                        .HasColumnName("Rental_period");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("DATE")
                        .HasColumnName("Return_date");

                    b.Property<int>("ServiceCode")
                        .HasColumnType("INT")
                        .HasColumnName("Service_code");

                    b.Property<int>("VehicleCode")
                        .HasColumnType("INT")
                        .HasColumnName("Vehicle_code");

                    b.HasIndex("ClientCode");

                    b.HasIndex("ServiceCode");

                    b.HasIndex("VehicleCode");

                    b.ToTable("Hire");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Position", b =>
                {
                    b.Property<int>("PositionCode")
                        .HasColumnType("INT")
                        .HasColumnName("Position_code");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<double>("Salary")
                        .HasColumnType("FLOAT");

                    b.Property<string>("TheNameOfThePosition")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("The_name_of_the_position");

                    b.HasKey("PositionCode");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.staff", b =>
                {
                    b.Property<int>("StaffCode")
                        .HasColumnType("INT")
                        .HasColumnName("Staff_code");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("CHAR(5)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Full_name");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Passport_data");

                    b.Property<string>("Paul")
                        .IsRequired()
                        .HasColumnType("CHAR(5)");

                    b.Property<int>("PositionCode")
                        .HasColumnType("INT")
                        .HasColumnName("Position_code");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("CHAR(11)");

                    b.HasKey("StaffCode");

                    b.HasIndex("PositionCode");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Car", b =>
                {
                    b.HasOne("Car_Rental_WH.Models.staff", "TheCodeOfTheEmployeeNavigation")
                        .WithMany("Cars")
                        .HasForeignKey("TheCodeOfTheEmployee")
                        .IsRequired();

                    b.Navigation("TheCodeOfTheEmployeeNavigation");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.CarBrand", b =>
                {
                    b.HasOne("Car_Rental_WH.Models.Car", "VehicleCodeNavigation")
                        .WithMany("CarBrands")
                        .HasForeignKey("VehicleCode");

                    b.Navigation("VehicleCodeNavigation");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Hire", b =>
                {
                    b.HasOne("Car_Rental_WH.Models.Customer", "ClientCodeNavigation")
                        .WithMany()
                        .HasForeignKey("ClientCode")
                        .IsRequired();

                    b.HasOne("Car_Rental_WH.Models.ComplementaryService", "ServiceCodeNavigation")
                        .WithMany()
                        .HasForeignKey("ServiceCode")
                        .IsRequired();

                    b.HasOne("Car_Rental_WH.Models.Car", "VehicleCodeNavigation")
                        .WithMany()
                        .HasForeignKey("VehicleCode")
                        .IsRequired();

                    b.Navigation("ClientCodeNavigation");

                    b.Navigation("ServiceCodeNavigation");

                    b.Navigation("VehicleCodeNavigation");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.staff", b =>
                {
                    b.HasOne("Car_Rental_WH.Models.Position", "PositionCodeNavigation")
                        .WithMany("staff")
                        .HasForeignKey("PositionCode")
                        .IsRequired();

                    b.Navigation("PositionCodeNavigation");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Car", b =>
                {
                    b.Navigation("CarBrands");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.Position", b =>
                {
                    b.Navigation("staff");
                });

            modelBuilder.Entity("Car_Rental_WH.Models.staff", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
